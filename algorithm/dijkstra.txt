1. 목적 및 배경
목적:
위성 네트워크(8×16 그리드)에서 패킷이 목표 위치(예: 특정 VNF를 가진 위성 또는 최종 목적지)로 전달되도록 최단 경로(여기서는 propagation delay가 최소인 경로)를 찾는 것.

배경:
전통적인 다익스트라 알고리즘은 단일 출발지에서 단일 목적지까지의 최단 경로를 찾는데 사용됩니다.
그런데 여기서는 패킷의 서비스 체인(SFC)에 따라 여러 목표(예: 다음 VNF가 설치된 위성들의 집합 또는 최종 목적지)가 될 수 있으므로, 여러 대상(target) 을 동시에 고려할 수 있도록 변형하였습니다.

2. 알고리즘 개요
노드: 위성 그리드의 각 위성이 노드입니다. (좌표 (x, y))
간선: 인접(상하좌우) 위성 간의 연결이며, 각 간선의 가중치는 두 위성 간의 propagation delay로 정의됩니다.
(만약 링크가 지구에 의해 가려지거나 장애가 발생하면, 해당 가중치는 무한대(inf)로 처리됩니다.)
목표 집합(targets):
패킷이 다음으로 가야 할 VNF를 제공하는 위성들의 집합 또는 최종 목적지(단일 좌표)가 됩니다.
3. 알고리즘 동작 단계
초기화:

거리(distance) 테이블:
각 노드에 대해 출발지로부터의 최단 거리(dist)를 저장하는 딕셔너리를 생성합니다. 모든 노드는 무한대(inf)로 초기화되고, 출발지 노드는 0으로 설정됩니다.
이전 노드(previous) 테이블:
최단 경로를 추적하기 위한 prev 딕셔너리를 생성합니다. 각 노드의 최단 경로 상에서 바로 이전에 위치한 노드를 저장합니다.
우선순위 큐(Priority Queue):
시작 노드와 거리를 튜플 (0, start) 형태로 우선순위 큐(파이썬의 heapq 사용)에 넣습니다.
메인 루프 (탐색 과정):

큐에서 노드 선택:
우선순위 큐에서 거리가 가장 짧은 노드를 꺼냅니다.
목표 도달 검사:
현재 선택된 노드가 목표 집합에 포함되어 있다면, 해당 노드를 목표로 하는 최단 경로가 완성된 것이므로 탐색을 종료합니다.
인접 노드 탐색 및 Edge Relaxation:
현재 노드의 인접 노드를 (상하좌우) 확인합니다.
각 인접 노드로의 propagation delay를 계산합니다.
이 때, formula.calculate_propagation_delay 함수를 사용하고, 만약 계산 결과가 NaN(즉, 링크가 불가능한 경우)이면 무한대로 처리합니다.
현재 노드까지의 누적 거리와 인접 노드로의 추가 delay를 합산하여, 기존에 기록된 인접 노드의 거리보다 작으면 갱신합니다.
갱신 시, 인접 노드의 prev 값도 현재 노드로 업데이트하고, 해당 노드를 우선순위 큐에 추가합니다.
종료 및 경로 복원:

목표에 해당하는 노드를 처음으로 큐에서 꺼내면, 해당 노드가 최단 경로 상에서 가장 먼저 도달한 목표입니다.
경로 복원:
prev 딕셔너리를 거꾸로 따라가면서 출발지에서부터 목표까지의 경로를 재구성한 후, 이를 역순으로 뒤집어 올바른 경로 순서를 만듭니다.
다음 홉 결정:
최종 경로에서 출발지 다음의 노드(즉, 두 번째 노드)가 패킷의 다음 홉이 됩니다.
4. 변형된 부분 (멀티 타깃 탐색)
멀티 타깃 고려:
전통적인 다익스트라 알고리즘은 단일 목적지까지의 최단 경로를 찾지만, 여기서는 목표가 여러 개일 수 있습니다.
구현 방법:
목표 집합(targets)을 인자로 받고, 큐에서 노드를 꺼낼 때 해당 노드가 목표 집합에 속하는지 검사합니다.
장점:
여러 후보 중에서 propagation delay가 가장 낮은 목표를 자동으로 선택할 수 있어, SFC 내에서 다음 VNF를 제공하는 위성이나 최종 목적지로의 경로를 효율적으로 결정할 수 있습니다.
5. 알고리즘의 특성 및 주의 사항
비용 측정:
여기서는 propagation delay만을 비용으로 사용하지만, 실제 패킷 전달 과정에서는 추가로 queueing, processing, transmission delay가 누적됩니다.
라우팅 경로 결정에는 propagation delay만 사용하여 경로 선택의 단순화를 도모합니다.

링크 장애 처리:
만약 특정 위성 간 연결이 지구에 의해 가려져 계산이 불가능할 경우, 해당 링크의 비용은 무한대로 설정되어 경로 계산에서 자연스럽게 배제됩니다.

성능:
8×16 그리드 같은 비교적 작은 네트워크에서는 다익스트라 알고리즘의 계산 비용이 크지 않지만, 네트워크 규모가 커지면 최적화가 필요할 수 있습니다.

